// Value will be equal to stringRepresentation with a character removed/inserted into a random index
// ---------------------------------------------------------------------------------------------------------------------------------------
// Method 1:
// ---------------------------------------------------------------------------------------------------------------------------------------
//
// Iterate through both the stringRepresentation and value at the same time
// The value[current] that differs from stringRepresentation[current] is the index that has been altered
//      Insert Ex. 
//                  stringRep = abcdef
//                  value =     abckdef
//      Delete Ex.
//                  stringRep = abcdef
//                  value =     abdef
//      Replace Ex.
//                  stringRep = abcdef
//                  value =     abvdef
//
// A character was inserted into value[current] if 
// --> subString(value, 0, current - 1) == subString(stringRep, 0, current - 1) &&
// --> subString(value, current + 1, length - 1) == subString(stringRep, current, length - 1)
// A character was deleted from value[current] if
// --> subString(value, 0, current - 1) == subString(stringRep, 0, current - 1) &&
// --> subString(value, current, length - 1) == subString(stringRep, current + 1, length - 1)
// A character was replaced from value[current] if the other two conditions are false
//
// If it needs to be known whether the value is an insertion or deletion before iteration,
// --> A character was inserted if value.length > stringRep.length
// --> A character was deleted if value.length < stringRep.length
// --> A character was replaced if value.length == stringRep.length
//
// To update list[index].value properly, the change in the current index must be properly reflected into its corresponding array
// For an array of length 3, it has indeces [0, ..., n - 1], [n, ..., n + (m - 1)], [n + m, ..., n + m + (o - 1)]
// If the current index is between n and n + (m - 1), then array[1] should be updated with subString(value, array[1] start, array[2] start - 1)
//
// Problem found: if a character is inserted between two strings, which string appends the character?
// The inserted character should only affect array odd indeces, so if a character is inserted in between an odd and even index, 
// the odd should index should be the one updated. 
//
// ---------------------------------------------------------------------------------------------------------------------------------------
// Method 2: 
// ---------------------------------------------------------------------------------------------------------------------------------------
//
// There are n strings in list[index].value, each of varying length
// String n remains the same if string == subString(value, start, start + offset),
// --> when start == total combined length of previous strings - (1 * number of previous strings) and offset = length of current string - 1
// Otherwise, the current string differs from the subString of value, meaning that the current string has been altered
// Note that all substrings after the affected index will not match their corresponding string
// In that case, updateValue(replaceArrayIndex(list[index].value, index of string, corresponding substring of value))
//
// ---------------------------------------------------------------------------------------------------------------------------------------

// Method 1
/*
var found = false;
var array = list[index].value;
for (var current = 0; current < value.length; current++) {
    // The value[current] that differs from stringRepresentation[current] is the index that has been altered
    if (value[current] != stringRepresentation[current] && !found) {
        // Check conditions for insertion/deletion/replacement
        if (wasInserted(value, stringRepresentation, current)) {
            console.log("INSERTION");
        } else if (wasDeleted(value, stringRepresentation, current)) {
            console.log("DELETION");
        } else {
            console.log("REPLACEMENT");
        }

        found = true;
    }
}
*/

// Method 2
/*
var array = list[index].value;
var count = 0;
var start = 0;
var offset = 0;
array.forEach((string) => {
    if (string) {
        if (string != subString(value, start, start + offset)) {
            updateValue(replaceArrayIndex(array, count, value));
        }
    } else {
        // In the case of which list[index].value has a null index, whether or not this string is altered depends on the next string
    }

    // Finally, increment string count
    count++;
});
*/